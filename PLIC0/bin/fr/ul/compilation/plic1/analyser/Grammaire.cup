package fr.ul.compilation.plic1.analyser ;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import fr.ul.compilation.plic1.*;
import fr.ul.compilation.plic1.expression.*;
import fr.ul.compilation.plic1.instruction.*;
import fr.ul.compilation.plic1.generateur.*;

action code {: 
				Systeme syst;
	    :} ;

parser code {:
    
    public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

terminal UMOINS, MOINS, PLUS, MULTIPLICATION, PAROUV, PARFER, INFERIEUR, EGAL, SUPERIEUR, DIFFERENT;
terminal PTVIRG, VIRG, ECRIRE, LIRE, EGAL_AFFECT, FIN, DEB, CLASS, HERITE, ENT, RETOURNE;
terminal String ENTIER, CHAINE, PUB, PRIV, IDF;

non terminal Systeme SYST;
non terminal Classe CLASSE;

non terminal ArrayList<Idf> LIDF;
non terminal ArrayList<Classe> CLASSES;
non terminal Expression EXPR, EXPR_LIST;
non terminal Instruction ECRIRE_FCT, LIRE_FCT, AFFECT, INST, RETOURNE_FCT;
non terminal Idf ACCES;
non terminal Binaire BOOL, EXPR_BOOL;
non terminal ParametresFormels PARFOR, LPAR;
non terminal ParametresEffectifs LPAREFF, PAREFF;
non terminal Type TYPE, PAR;
non terminal Statut STATUT;
non terminal ListeDInstructions LIINSTR;
non terminal Idf IDFN;
non terminal LDECL, DECL, LDECLVAR, DECLVAR;

precedence left INFERIEUR, EGAL, SUPERIEUR, DIFFERENT, PLUS, MOINS;
precedence left MULTIPLICATION;
precedence left UMOINS;

start with SYST;

SYST	::= CLASSES:lc
		{:
			syst = new Systeme(lc, lcleft);
			RESULT = syst;
		:}
		;
		
CLASSES ::= CLASSES:lc CLASSE:c
		{:
			lc.add(c);
			RESULT = lc;
		:}
		| CLASSE:c
		{:
			ArrayList<Classe> al = new ArrayList<Classe>();
			al.add(c);
			RESULT = al;
		:}
		;
		
CLASSE 	::= CLASS IDFN:i
		{:
			
			EntreeClasse ic = new EntreeClasse(i);
			SymboleClasse sc = new SymboleClasse(ileft, null);
			Classe cla = new Classe(i, null, ileft);
			TDS.getInstance().ajouter(ic, sc);
			TDS.getInstance().entreeClasse(i);
			EtatCompilateur.getInstance().setClasseEnCours(cla);
			RESULT = cla;
		:}
		LDECL FIN
		{:
			TDS.getInstance().sortieClasse();
		:}
		|
		CLASS IDFN:i HERITE IDFN:a
		{:
			EntreeClasse ic = new EntreeClasse(i);
			SymboleClasse sc = new SymboleClasse(ileft, a);
			Classe cla = new Classe(i, a, ileft);
			TDS.getInstance().ajouter(ic, sc);
			TDS.getInstance().entreeClasse(i);
			EtatCompilateur.getInstance().setClasseEnCours(cla);
			RESULT = cla;
		:}
		LDECL FIN
		{:
			TDS.getInstance().sortieClasse();
		:}
		;
		
LDECL	::= DECL LDECL | ;

DECL	::= STATUT:s TYPE:t IDFN:i LIDF:li PTVIRG
		{:
			EntreeChamp ec = new EntreeChamp(i);
			SymboleChamp sc = new SymboleChamp(ileft, s, t);
			TDS.getInstance().ajouter(ec, sc);
			for(Idf id : li) {
				ec = new EntreeChamp(id);
				sc = new SymboleChamp(ileft, s, t);
				TDS.getInstance().ajouter(ec, sc);
			}
		:}
		|
		STATUT:s IDFN:i
		{:
			TDS.getInstance().entreeBloc();
		:}
		PARFOR:lp DEB LDECLVAR LIINSTR:li FIN
		{:
			Classe cc = EtatCompilateur.getInstance().classeEnCours();
			EntreeConstructeur ec = new EntreeConstructeur(i, lp);
			SymboleConstructeur sc = new SymboleConstructeur(ileft, i, s, lp, li);
			TDS.getInstance().sortieBloc();
			TDS.getInstance().ajouter(ec, sc);
			cc.ajouterConstructeur(ec, sc);
		:}
		|
		STATUT:s TYPE:t IDFN:i
		{:
			TDS.getInstance().entreeBloc();
		:}
		PARFOR:lp DEB LDECLVAR LIINSTR:li FIN
		{:
			Classe cc = EtatCompilateur.getInstance().classeEnCours();
			EntreeMethode em = new EntreeMethode(i, lp);
			SymboleMethode sm = new SymboleMethode(ileft, i, s, lp, t, li);
			TDS.getInstance().sortieBloc();
			TDS.getInstance().ajouter(em, sm);
			cc.ajouterMethode(em, sm);
		:}
		;
		
LIDF	::= VIRG IDFN:i LIDF:li
		{:
			li.add(0, i);
			RESULT = li;
		:}
		|
		{:
			RESULT = new ArrayList<Idf>();
		:}
		;
		
STATUT	::= PUB
		{:
			RESULT = Statut.spublic;
		:}
		|
		PRIV
		{:
			RESULT = Statut.sprive;
		:}
		;
		
TYPE	::= ENT
		{:
			RESULT = TypeEntier.getInstance();
		:}
		|
		IDFN:idf
		{:
			RESULT = new TypeClasse(idf);
		:}
		;
		
PARFOR	::= PAROUV LPAR:lp PARFER
		{:
			RESULT = lp;
		:}
		|
		PAROUV PARFER
		{:
			RESULT = new ParametresFormels();
		:}
		;

LPAR	::= PAR:s
		{:
			ParametresFormels pf = new ParametresFormels();
			pf.add(s);
			RESULT = pf;
		:}
		|
		LPAR:pf VIRG PAR:s 
		{:
			pf.add(s);
			RESULT = pf;
		:}
		;
		
PAR		::= TYPE:t IDFN:i
		{:
			EntreeVarLocPar e = new EntreeVarLocPar(i);
			SymboleVarPar s = new SymboleVarPar(ileft, null, t);
			TDS.getInstance().ajouter(e, s);
			RESULT = t;
		:}
		;
		
PAREFF	::= PAROUV LPAREFF:lp PARFER
		{:
			RESULT = lp;
		:}
		|
		PAROUV PARFER
		{:
			RESULT = new ParametresEffectifs();
		:}
		;

LPAREFF	::= EXPR_LIST:s
		{:
			ParametresEffectifs pf = new ParametresEffectifs();
			pf.add(s);
			RESULT = pf;
		:}
		|
		LPAREFF:pf VIRG EXPR_LIST:s
		{:
			pf.add(s);
			RESULT = pf;
		:}
		;
		
LDECLVAR::= | LDECLVAR DECLVAR;
		
DECLVAR::= TYPE:t IDFN:i LIDF:li PTVIRG
		{:
			EntreeVariable ec = new EntreeVariable(i);
			SymboleVariable sc = new SymboleVariable(ileft, null, t);
			TDS.getInstance().ajouter(ec, sc);
			for(Idf id : li) {
				ec = new EntreeVariable(id);
				sc = new SymboleVariable(ileft, null, t);
				TDS.getInstance().ajouter(ec, sc);
			}
		:};
		
LIINSTR	::= LIINSTR:li INST:inst
		{:
			li.add(inst);
			RESULT = li;
		:} 
		| INST:inst
		{:
			ListeDInstructions ldi = new ListeDInstructions();
			ldi.add(inst);
			RESULT = ldi;
		:};
		
INST	::= ECRIRE_FCT:e
		{:
			RESULT = e;
		:}
		| LIRE_FCT:e
		{:
			RESULT = e;
		:}
		| AFFECT:e
		{:
			RESULT = e;
		:}
		| RETOURNE_FCT:e
		{:
			RESULT = e;
		:}
		;
		
AFFECT 	::= ACCES:e1 EGAL_AFFECT EXPR_LIST:e2 PTVIRG
		{:
			RESULT = new Affection(e1, e2);
		:};
		
ACCES 	::= IDFN:id
		{:
			EntreeVariable ev = new EntreeVariable(id);
			SymboleVariable sv = new SymboleVariable(idleft+1, null, TypeEntier.getInstance());
			TDS.getInstance().ajouter(ev, sv);
			RESULT = id;
		:};
		
RETOURNE_FCT::= RETOURNE EXPR_LIST:e PTVIRG
		{:
			RESULT = new Retourne(e);
		:}
;		
LIRE_FCT ::= LIRE IDFN:id PTVIRG
		{:
			RESULT = new Lire(id.getIdentifier());
		:};

ECRIRE_FCT::= ECRIRE EXPR_LIST:e PTVIRG
		{:
			RESULT = new Ecrire(e);
		:}
		| ECRIRE CHAINE:ch PTVIRG
		{:
			RESULT = new Ecrire(new Chaine(ch));
		:}
		;

EXPR_LIST::= EXPR_BOOL:e
		{: RESULT = e; :}
		| EXPR:e
		{: RESULT = e; :}
		;
						 		   
EXPR	::=	EXPR:e1 MOINS EXPR:e2
		{: 
		   	RESULT = new Soustraction(e1, e2);
	 	:}
	 	| EXPR:e1 PLUS EXPR:e2
		{: 
		   	RESULT = new Somme(e1, e2);
	 	:}
	 	| EXPR:e1 MULTIPLICATION EXPR:e2
		{: 
		  	RESULT = new Multiplication(e1, e2);
	 	:}
		| MOINS EXPR:e
		{:
		   	RESULT = new Soustraction(new Entier(0), e) ;
	 	:}
	 	%prec UMOINS
		| ENTIER:i
		{:	
			RESULT = new Entier(Integer.parseInt(i)); 
		:}
		| PAROUV EXPR:e PARFER
		{:
		   	RESULT = e;
	 	:}
	 	| IDFN:id PAREFF
	 	{:
	 		
	 	:}
	 	| IDFN:id
	 	{:	
	 		EntreeVariable ev = new EntreeVariable(id);
			SymboleVariable sv = new SymboleVariable(idleft+1, null, TypeEntier.getInstance());
			TDS.getInstance().ajouter(ev, sv);
			RESULT = id;
	 	:}
		;

EXPR_BOOL ::= EXPR_BOOL:e1 BOOL:b EXPR_BOOL:e2
		{: 	b.ajouterGauche(e1);
	   		b.ajouterDroit(e2);
	   		RESULT = b;
	   	:}
	   	| PAROUV EXPR_BOOL:e PARFER
		{:
		   	RESULT = e;
	 	:}
		| EXPR:e1 BOOL:b EXPR:e2
		{: 	b.ajouterGauche(e1);
	   		b.ajouterDroit(e2);
	   		RESULT = b;
	   	:}
		;

BOOL	::= INFERIEUR
		{:RESULT = new Inferieur(); :}
		| EGAL
		{:RESULT = new Egal(); :}
		| SUPERIEUR
		{:RESULT = new Superieur(); :}
		|DIFFERENT
		{:RESULT = new Inegalite(); :}
		;
		
IDFN ::= IDF:i
	{:RESULT = new Idf(i); :}
;