package fr.ul.compilation.plic0.analyser ;

import java_cup.runtime.*;
import fr.ul.compilation.plic0.*;

action code {: 
       	      	Expression arb = null;  
	    :} ;

parser code {:
    
    public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

terminal UMOINS, MOINS, PLUS, MULTIPLICATION, PARO, PARF, INFERIEUR, EGAL, SUPERIEUR, DIFFERENT;
terminal String ENTIER;

non terminal Expression EXPR, EXPR_BOOL, BOOL, PROG;

precedence left INFERIEUR, EGAL, SUPERIEUR, DIFFERENT, PLUS, MOINS;
precedence left MULTIPLICATION;
precedence left UMOINS;

start with PROG ;

PROG	::= EXPR_BOOL:e
		{: RESULT = e; :}
		| EXPR:e
		{: RESULT = e; :}
		;
		
						 		   
EXPR	::=	EXPR:e1 MOINS EXPR:e2
		{: 
		   	RESULT = new Soustraction(e1, e2);
	 	:}
	 	| EXPR:e1 PLUS EXPR:e2
		{: 
		   	RESULT = new Somme(e1, e2);
	 	:}
	 	| EXPR:e1 MULTIPLICATION EXPR:e2
		{: 
		  	RESULT = new Multiplication(e1, e2);
	 	:}
		| MOINS EXPR:e
		{:
		   	RESULT = new Entier(new Entier(0), e) ;
	 	:}
	 	%prec UMOINS
		| ENTIER:i
		{:	
			RESULT = new Entier(Integer.parseInt(i)); 
		:}
		| PARO EXPR:e PARF
		{:
		   	RESULT = e;
	 	:}
		;

EXPR_BOOL ::= EXPR:e1 BOOL:b EXPR:e2
		{: 	b.ajouterGauche(e1);
	   		b.ajouterDroit(e2);
	   		RESULT = b;
	   	:}
;
BOOL	::= INFERIEUR
		{:RESULT = new Inferieur(); :}
		| EGAL
		{:RESULT = new Egal(); :}
		| SUPERIEUR
		{:RESULT = new Superieur(); :}
		|DIFFERENT
		{:RESULT = new Inegalite(); :}
		;
